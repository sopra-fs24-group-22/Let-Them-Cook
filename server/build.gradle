plugins {
  id 'org.springframework.boot' version '2.4.13'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'java'
  id 'idea'
  id 'jacoco'
  id "org.sonarqube" version "4.4.1.3373"
}

group 'com.letthemcook'
version '1.0.0'

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(17))
  }
}

configurations {
  developmentOnly
  runtimeClasspath {
    extendsFrom developmentOnly
  }
}

repositories {
  mavenCentral()
}

springBoot {
  mainClass.set('com.letthemcook.Application')
}

dependencies {
  implementation 'org.mapstruct:mapstruct:1.3.1.Final'
  implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
  implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
  implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
  implementation group: 'com.auth0', name: 'java-jwt', version: '4.0.0'
  implementation 'org.slf4j:slf4j-api:1.7.25'
  testImplementation 'org.springframework.security:spring-security-test'
  annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
  testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'

  implementation 'org.springframework.boot:spring-boot-starter-web'

  developmentOnly 'org.springframework.boot:spring-boot-devtools'

  testImplementation('org.springframework.boot:spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
}

bootJar {
  archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

sonarqube {
  properties {
    property "sonar.projectKey", "sopra-fs24-group-22_Let-Them-Cook"
    property "sonar.organization", "sopra-fs24-group-22"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

jacocoTestReport {
  reports {
    xml.enabled true
  }
}

test {
  useJUnitPlatform()
  testLogging.showStandardStreams = true
  maxParallelForks = 1
}

File secretPropsFile = file('./local.properties')
if (secretPropsFile.exists()) {
  Properties p = new Properties()
  p.load(new FileInputStream(secretPropsFile))
  p.each { name, value ->
    ext[name] = value
  }
}

defaultTasks 'bootJar', 'build'